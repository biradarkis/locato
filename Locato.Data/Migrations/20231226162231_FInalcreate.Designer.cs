// <auto-generated />
using System;
using Locato.Data.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Locato.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231226162231_FInalcreate")]
    partial class FInalcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Locato.Data.Entities.Business.Organization", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("API_URL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("api_url");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("GSTNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gst_number");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("locale");

                    b.Property<long?>("LogoId")
                        .HasColumnType("bigint")
                        .HasColumnName("logo_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PANNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pan_number");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<string>("TANNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tan_number");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.HasIndex("LogoId")
                        .HasDatabaseName("ix_organizations_logo_id");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Communication.EmailNotification", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_id");

                    b.Property<bool>("IsSucess")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sucess");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_type");

                    b.Property<int>("Retries")
                        .HasColumnType("integer")
                        .HasColumnName("retries");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_email_notifications");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_email_notifications_user_id");

                    b.ToTable("email_notifications", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Communication.Message", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long?>("AttachmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("attachment_id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("DeliverOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deliver_on");

                    b.Property<bool>("Delivered")
                        .HasColumnType("boolean")
                        .HasColumnName("delivered");

                    b.Property<byte[]>("EncodedText")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("Text");

                    b.Property<bool>("ExpiredBeforeSeen")
                        .HasColumnType("boolean")
                        .HasColumnName("expired_before_seen");

                    b.Property<long?>("ForUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("for_user_id");

                    b.Property<bool>("IsUnicodeSms")
                        .HasColumnType("boolean")
                        .HasColumnName("is_unicode_sms");

                    b.Property<long>("TripId")
                        .HasColumnType("bigint")
                        .HasColumnName("trip_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("AttachmentId")
                        .HasDatabaseName("ix_messages_attachment_id");

                    b.HasIndex("CreatedById")
                        .IsUnique()
                        .HasDatabaseName("ix_messages_created_by_id");

                    b.HasIndex("ForUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_messages_for_user_id");

                    b.HasIndex("TripId")
                        .HasDatabaseName("ix_messages_trip_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_messages_user_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Communication.PushNotification", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_push_notification");

                    b.ToTable("push_notification", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Communication.SmsNotification", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sms_notification");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sms_notification_user_id");

                    b.ToTable("sms_notification", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Media.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mime_type");

                    b.Property<byte[]>("RawContent")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("Content");

                    b.Property<string>("StorageURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_url");

                    b.Property<byte[]>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("thumbnail");

                    b.Property<string>("ThumbnailKey")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("thumbnail_key");

                    b.Property<string>("ThumbnailStorageURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_storage_url");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_attachments");

                    b.ToTable("attachments", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Media.StaticMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<bool>("IsReady")
                        .HasColumnType("boolean")
                        .HasColumnName("is_ready");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mime_type");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean")
                        .HasColumnName("processed");

                    b.Property<byte[]>("RawContent")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("Content");

                    b.Property<string>("StorageURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_url");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_static_medias");

                    b.HasIndex(new[] { "Key" }, "Ix_Key")
                        .IsUnique()
                        .HasDatabaseName("ix_static_medias_key");

                    b.ToTable("static_medias", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Scheduling.Event", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_holiday");

                    b.Property<bool>("IsOrganizationEvent")
                        .HasColumnType("boolean")
                        .HasColumnName("isorgevent");

                    b.Property<bool>("IsRouteEvent")
                        .HasColumnType("boolean")
                        .HasColumnName("isrouteevent");

                    b.Property<bool>("IsUserEvent")
                        .HasColumnType("boolean")
                        .HasColumnName("isuserevent");

                    b.Property<long?>("MediaId")
                        .HasColumnType("bigint")
                        .HasColumnName("media_id");

                    b.Property<long?>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<long?>("RouteId")
                        .HasColumnType("bigint")
                        .HasColumnName("route_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("MediaId")
                        .HasDatabaseName("ix_events_media_id");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_events_organization_id");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_events_route_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_events_user_id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Scheduling.OrganizationOffDay", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("OffDay")
                        .HasColumnType("integer")
                        .HasColumnName("off_day");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_organization_off_days");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_organization_off_days_organization_id");

                    b.ToTable("organization_off_days", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.Route", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("AverageSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("average_speed");

                    b.Property<bool>("CalculateEta")
                        .HasColumnType("boolean")
                        .HasColumnName("calculate_eta");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("DrawnRoute")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("drawn_route");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("NotifyForEta")
                        .HasColumnType("boolean")
                        .HasColumnName("notify_for_eta");

                    b.Property<bool>("NotifyOnTripStart")
                        .HasColumnType("boolean")
                        .HasColumnName("notify_on_trip_start");

                    b.Property<bool>("NotifyOnTripStop")
                        .HasColumnType("boolean")
                        .HasColumnName("notify_on_trip_stop");

                    b.Property<DateTimeOffset?>("OnTimeFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("on_time_from");

                    b.Property<DateTimeOffset?>("OnTimeTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("on_time_to");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Track")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("track");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("VehicleId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_routes");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_routes_organization_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_routes_vehicle_id");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.RouteGeoFenceCoordinate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint")
                        .HasColumnName("route_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_routegeofencecords");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_routegeofencecords_route_id");

                    b.ToTable("routegeofencecords", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.RouteStop", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("place_id");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint")
                        .HasColumnName("route_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_route_stops");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_route_stops_route_id");

                    b.ToTable("route_stops", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.RouteStopGeoFence", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<double>("RadiusInMeters")
                        .HasColumnType("double precision")
                        .HasColumnName("radius_in_meters");

                    b.Property<long>("RouteStopId")
                        .HasColumnType("bigint")
                        .HasColumnName("route_stop_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_route_stop_geo_fences");

                    b.HasIndex("RouteStopId")
                        .IsUnique()
                        .HasDatabaseName("ix_route_stop_geo_fences_route_stop_id");

                    b.ToTable("route_stop_geo_fences", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.RouteTiming", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint")
                        .HasColumnName("route_id");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_route_timings");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_route_timings_route_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_route_timings_vehicle_id");

                    b.ToTable("route_timings", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Tracker.OrganizationTrackerDevice", b =>
                {
                    b.Property<long>("TrackerDeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("tracker_device_id");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.HasKey("TrackerDeviceId", "OrganizationId")
                        .HasName("pk_orgtrackerdevices");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_orgtrackerdevices_organization_id");

                    b.ToTable("orgtrackerdevices", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Tracker.TrackerDevice", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("OrgId")
                        .HasColumnType("bigint")
                        .HasColumnName("org_id");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_tracker_devices");

                    b.HasIndex("OrgId")
                        .HasDatabaseName("ix_tracker_devices_org_id");

                    b.ToTable("tracker_devices", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Tracker.TrackerDeviceAlarm", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("AlarmType")
                        .HasColumnType("integer")
                        .HasColumnName("alarm_type");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meta");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<long>("TrackerDeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("tracker_device_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_tracker_device_alarms");

                    b.HasIndex("TrackerDeviceId")
                        .HasDatabaseName("ix_tracker_device_alarms_tracker_device_id");

                    b.ToTable("tracker_device_alarms", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Tracker.TrackerDeviceLocation", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool?>("Acc")
                        .HasColumnType("boolean")
                        .HasColumnName("acc");

                    b.Property<int?>("Course")
                        .HasColumnType("integer")
                        .HasColumnName("course");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<bool?>("EastLongitude")
                        .HasColumnType("boolean")
                        .HasColumnName("east_longitude");

                    b.Property<int?>("InformationLength")
                        .HasColumnType("integer")
                        .HasColumnName("information_length");

                    b.Property<bool?>("NorthLatitude")
                        .HasColumnType("boolean")
                        .HasColumnName("north_latitude");

                    b.Property<bool?>("RealTimeGps")
                        .HasColumnType("boolean")
                        .HasColumnName("real_time_gps");

                    b.Property<int?>("SatellitesUsed")
                        .HasColumnType("integer")
                        .HasColumnName("satellites_used");

                    b.Property<long?>("SerialNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("serial_number");

                    b.Property<int?>("Speed")
                        .HasColumnType("integer")
                        .HasColumnName("speed");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<long>("TrackerDeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("tracker_device_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<double?>("Voltage")
                        .HasColumnType("double precision")
                        .HasColumnName("voltage");

                    b.HasKey("Id")
                        .HasName("pk_trackerlocations");

                    b.HasIndex("TrackerDeviceId")
                        .HasDatabaseName("ix_trackerlocations_tracker_device_id");

                    b.ToTable("trackerlocations", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Trips.Trip", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<double?>("DistanceTravelled")
                        .HasColumnType("double precision")
                        .HasColumnName("distance_travelled");

                    b.Property<long?>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("driver_id");

                    b.Property<string>("EndReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("end_reason");

                    b.Property<DateTimeOffset?>("EndedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_on");

                    b.Property<bool>("InProgress")
                        .HasColumnType("boolean")
                        .HasColumnName("in_progress");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint")
                        .HasColumnName("route_id");

                    b.Property<DateTimeOffset?>("StartedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_on");

                    b.Property<string>("TimingStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("timing_status");

                    b.Property<long?>("TrackerDeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("tracker_device_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("VehicleLicenseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicle_license_number");

                    b.HasKey("Id")
                        .HasName("pk_trips");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_trips_driver_id");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_trips_route_id");

                    b.HasIndex("TrackerDeviceId")
                        .HasDatabaseName("ix_trips_tracker_device_id");

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Trips.TripActiveGeoFence", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset>("EntryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entry_time");

                    b.Property<string>("GeofenceStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("geofence_status");

                    b.Property<long>("StopGeofenceId")
                        .HasColumnType("bigint")
                        .HasColumnName("stop_geofence_id");

                    b.Property<long>("TripId")
                        .HasColumnType("bigint")
                        .HasColumnName("trip_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_trip_active_geo_fences");

                    b.HasIndex("StopGeofenceId")
                        .HasDatabaseName("ix_trip_active_geo_fences_stop_geofence_id");

                    b.HasIndex("TripId")
                        .HasDatabaseName("ix_trip_active_geo_fences_trip_id");

                    b.ToTable("trip_active_geo_fences", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Trips.TripLocation", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("TripId")
                        .HasColumnType("bigint")
                        .HasColumnName("trip_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_trip_locations");

                    b.HasIndex("TripId")
                        .HasDatabaseName("ix_trip_locations_trip_id");

                    b.ToTable("trip_locations", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Trips.TripNotification", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("TripId")
                        .HasColumnType("bigint")
                        .HasColumnName("trip_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_trip_notifications");

                    b.HasIndex("TripId")
                        .HasDatabaseName("ix_trip_notifications_trip_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_trip_notifications_user_id");

                    b.ToTable("trip_notifications", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Trips.TripSubscriber", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("connection_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<long>("SubscriberId")
                        .HasColumnType("bigint")
                        .HasColumnName("subscriber_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_trip_subscribers");

                    b.HasIndex("SubscriberId")
                        .HasDatabaseName("ix_trip_subscribers_subscriber_id");

                    b.ToTable("trip_subscribers", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntites.VehicleAlert", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alert_type");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("OrgBusId")
                        .HasColumnType("bigint")
                        .HasColumnName("org_bus_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<long?>("TrackerDeviceAlarmId")
                        .HasColumnType("bigint")
                        .HasColumnName("tracker_device_alarm_id");

                    b.Property<long>("TrackerDeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("tracker_device_id");

                    b.Property<long?>("TripId")
                        .HasColumnType("bigint")
                        .HasColumnName("trip_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_alerts");

                    b.HasIndex("TrackerDeviceAlarmId")
                        .HasDatabaseName("ix_vehicle_alerts_tracker_device_alarm_id");

                    b.HasIndex("TrackerDeviceId")
                        .HasDatabaseName("ix_vehicle_alerts_tracker_device_id");

                    b.HasIndex("TripId")
                        .HasDatabaseName("ix_vehicle_alerts_trip_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_vehicle_alerts_vehicle_id");

                    b.ToTable("vehicle_alerts", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntites.VehicleDistanceTraveled", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<double>("DistanceTraveled")
                        .HasColumnType("double precision")
                        .HasColumnName("distance_traveled");

                    b.Property<long?>("TripId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("trip_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_distance_traveled");

                    b.HasIndex("TripId")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicle_distance_traveled_trip_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_vehicle_distance_traveled_vehicle_id");

                    b.ToTable("vehicle_distance_traveled", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntites.VehicleTrackerDeviceLog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("LogEntryType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("log_entry_type");

                    b.Property<long>("TrackerDeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("tracker_device_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicletdlogs");

                    b.HasIndex("TrackerDeviceId")
                        .HasDatabaseName("ix_vehicletdlogs_tracker_device_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_vehicletdlogs_vehicle_id");

                    b.ToTable("vehicletdlogs", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntities.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("BGV")
                        .HasColumnType("boolean")
                        .HasColumnName("bgv");

                    b.Property<long?>("BusdriverId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("busdriver_id");

                    b.Property<bool>("CCTV")
                        .HasColumnType("boolean")
                        .HasColumnName("cctv");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chassis_number");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("engine_number");

                    b.Property<bool>("FireExtinguisher")
                        .HasColumnType("boolean")
                        .HasColumnName("fire_extinguisher");

                    b.Property<DateTime?>("FireExtinguisherEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fire_extinguisher_end_date");

                    b.Property<DateTime?>("FireExtinguisherStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fire_extinguisher_start_date");

                    b.Property<bool>("FirstAidBox")
                        .HasColumnType("boolean")
                        .HasColumnName("first_aid_box");

                    b.Property<DateTime?>("FirstAidBoxEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_aid_box_end_date");

                    b.Property<DateTime?>("FirstAidBoxStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_aid_box_start_date");

                    b.Property<DateTime?>("FitnessCertificateEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fitness_certificate_end_date");

                    b.Property<DateTime?>("FitnessCertificateStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fitness_certificate_start_date");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fuel_type");

                    b.Property<DateTime?>("InsuranceEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insurance_end_date");

                    b.Property<DateTime?>("InsuranceStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insurance_start_date");

                    b.Property<bool>("IsBlackedout")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blackedout");

                    b.Property<int?>("MakeYear")
                        .HasColumnType("integer")
                        .HasColumnName("make_year");

                    b.Property<string>("ModelNameAndNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model_name_and_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double?>("OdometerReading")
                        .HasColumnType("double precision")
                        .HasColumnName("odometer_reading");

                    b.Property<long>("OrgId")
                        .HasColumnType("bigint")
                        .HasColumnName("org_id");

                    b.Property<DateTime?>("OrgPermitEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("org_permit_end_date");

                    b.Property<DateTime?>("OrgPermitStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("org_permit_start_date");

                    b.Property<bool>("OwnedByOrg")
                        .HasColumnType("boolean")
                        .HasColumnName("owned_by_org");

                    b.Property<DateTime?>("PermitEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("permit_end_date");

                    b.Property<DateTime?>("PermitStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("permit_start_date");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("registration_number");

                    b.Property<int>("SeatCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("seat_capacity");

                    b.Property<int?>("SpeedLimit")
                        .HasColumnType("integer")
                        .HasColumnName("speed_limit");

                    b.Property<DateTime?>("TaxEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tax_end_date");

                    b.Property<DateTime?>("TaxStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tax_start_date");

                    b.Property<long?>("TrackerDeviceId")
                        .HasColumnType("bigint")
                        .HasColumnName("tracker_device_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<DateTime?>("VehicleNextInspectionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("vehicle_next_inspection_date");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicle_type");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("BusdriverId")
                        .HasDatabaseName("ix_vehicles_busdriver_id");

                    b.HasIndex("OrgId")
                        .HasDatabaseName("ix_vehicles_org_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntities.VehicleAlertUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("AlertId")
                        .HasColumnType("bigint")
                        .HasColumnName("alert_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset?>("ReadOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_on");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_alert_users");

                    b.HasIndex("AlertId")
                        .HasDatabaseName("ix_vehicle_alert_users_alert_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_vehicle_alert_users_user_id");

                    b.ToTable("vehicle_alert_users", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntities.VehicleMedia", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint")
                        .HasColumnName("file_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_medias");

                    b.HasIndex("FileId")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicle_medias_file_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_vehicle_medias_vehicle_id");

                    b.ToTable("vehicle_medias", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.BaseUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_status");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("login_attempts");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_base_users");

                    b.ToTable("base_users", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.Photo", b =>
                {
                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("profile_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("mime_type");

                    b.Property<byte[]>("RawBytes")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("raw_bytes");

                    b.Property<byte[]>("ThumbnailLarge")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("thumbnail_large");

                    b.Property<string>("ThumbnailLargeKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_large_key");

                    b.HasKey("ProfileId")
                        .HasName("pk_photos");

                    b.ToTable("photos", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.Profile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<int>("Sex")
                        .HasColumnType("integer")
                        .HasColumnName("sex");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_profiles");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_status");

                    b.Property<long>("BaseUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("base_user_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("designation");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<bool>("PhoneVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_verified");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("profile_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint")
                        .HasColumnName("route_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("BaseUserId")
                        .HasDatabaseName("ix_users_base_user_id");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_users_organization_id");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_users_profile_id");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_users_route_id");

                    b.ToTable("users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.UserDeviceInfo", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_token");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type");

                    b.Property<string>("OsVersion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("os_version");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_device_infoes");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_device_infoes_user_id");

                    b.ToTable("user_device_infoes", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Validation.LoginUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_login_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_login_users_user_id");

                    b.ToTable("login_users", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Validation.UserOTP", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<int>("Otp")
                        .HasColumnType("integer")
                        .HasColumnName("otp");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_ot_ps");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_ot_ps_user_id");

                    b.ToTable("user_ot_ps", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.Validation.UserTemporaryPassword", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("BaseUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("base_user_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_till");

                    b.HasKey("Id")
                        .HasName("pk_usertemppass");

                    b.HasIndex("BaseUserId")
                        .HasDatabaseName("ix_usertemppass_base_user_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_usertemppass_created_by_id");

                    b.ToTable("usertemppass", (string)null);
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.Driver", b =>
                {
                    b.HasBaseType("Locato.Data.Entities.UserEntities.User");

                    b.HasDiscriminator().HasValue("Driver");
                });

            modelBuilder.Entity("Locato.Data.Entities.Business.Organization", b =>
                {
                    b.HasOne("Locato.Data.Entities.Media.StaticMedia", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId")
                        .HasConstraintName("fk_organizations_static_medias_logo_id");

                    b.OwnsOne("Locato.Data.Web.Location", "Address", b1 =>
                        {
                            b1.Property<long>("OrganizationId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_country");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("address_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("address_longitude");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_street");

                            b1.Property<string>("Zip")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_zip");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId")
                                .HasConstraintName("fk_organizations_organizations_id");
                        });

                    b.OwnsOne("Locato.Data.Web.Phone", "AlternatePhone", b1 =>
                        {
                            b1.Property<long>("OrganizationId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int>("CountryCode")
                                .HasColumnType("integer")
                                .HasColumnName("alternate_phone_country_code");

                            b1.Property<long>("E164Format")
                                .HasColumnType("bigint")
                                .HasColumnName("alternate_phone_e164format");

                            b1.Property<long>("NationalNumber")
                                .HasColumnType("bigint")
                                .HasColumnName("alternate_phone_national_number");

                            b1.Property<string>("RawInput")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("alternate_phone_raw_input");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId")
                                .HasConstraintName("fk_organizations_organizations_id");
                        });

                    b.OwnsOne("Locato.Data.Web.Phone", "Phone", b1 =>
                        {
                            b1.Property<long>("OrganizationId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int>("CountryCode")
                                .HasColumnType("integer")
                                .HasColumnName("phone_country_code");

                            b1.Property<long>("E164Format")
                                .HasColumnType("bigint")
                                .HasColumnName("phone_e164format");

                            b1.Property<long>("NationalNumber")
                                .HasColumnType("bigint")
                                .HasColumnName("phone_national_number");

                            b1.Property<string>("RawInput")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("phone_raw_input");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId")
                                .HasConstraintName("fk_organizations_organizations_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("AlternatePhone")
                        .IsRequired();

                    b.Navigation("Logo");

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("Locato.Data.Entities.Communication.EmailNotification", b =>
                {
                    b.HasOne("Locato.Data.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_notifications_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Locato.Data.Entities.Communication.Message", b =>
                {
                    b.HasOne("Locato.Data.Entities.Media.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("fk_messages_attachments_attachment_id");

                    b.HasOne("Locato.Data.Entities.UserEntities.User", "CreatedBy")
                        .WithOne()
                        .HasForeignKey("Locato.Data.Entities.Communication.Message", "CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_created_by_id");

                    b.HasOne("Locato.Data.Entities.UserEntities.User", "CreatedFor")
                        .WithOne()
                        .HasForeignKey("Locato.Data.Entities.Communication.Message", "ForUserId")
                        .HasConstraintName("fk_messages_users_created_for_id");

                    b.HasOne("Locato.Data.Entities.Transport.Trips.Trip", "Trip")
                        .WithMany("Messages")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_trips_trip_id");

                    b.HasOne("Locato.Data.Entities.UserEntities.User", null)
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_messages_users_user_id");

                    b.Navigation("Attachment");

                    b.Navigation("CreatedBy");

                    b.Navigation("CreatedFor");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Locato.Data.Entities.Communication.SmsNotification", b =>
                {
                    b.HasOne("Locato.Data.Entities.UserEntities.User", null)
                        .WithMany("SmsNotifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_sms_notification_users_user_id");
                });

            modelBuilder.Entity("Locato.Data.Entities.Scheduling.Event", b =>
                {
                    b.HasOne("Locato.Data.Entities.Media.StaticMedia", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .HasConstraintName("fk_events_static_medias_media_id");

                    b.HasOne("Locato.Data.Entities.Business.Organization", "Organization")
                        .WithMany("OrganiationEvents")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_organizations_organization_id");

                    b.HasOne("Locato.Data.Entities.Transport.Routes.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .HasConstraintName("fk_events_routes_route_id");

                    b.HasOne("Locato.Data.Entities.UserEntities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_users_user_id");

                    b.Navigation("Media");

                    b.Navigation("Organization");

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Locato.Data.Entities.Scheduling.OrganizationOffDay", b =>
                {
                    b.HasOne("Locato.Data.Entities.Business.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_off_days_organizations_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.Route", b =>
                {
                    b.HasOne("Locato.Data.Entities.Business.Organization", "Organization")
                        .WithMany("Routes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_routes_organizations_organization_id");

                    b.HasOne("Locato.Data.Entities.Transport.VehicleEntities.Vehicle", "Vehicle")
                        .WithMany("Routes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routes_vehicles_vehicle_id");

                    b.OwnsOne("Locato.Data.Web.BaseLocation", "EndLocation", b1 =>
                        {
                            b1.Property<long>("RouteId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("end_location_address");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("end_location_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("end_location_longitude");

                            b1.Property<string>("PlaceId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("end_location_place_id");

                            b1.HasKey("RouteId");

                            b1.ToTable("routes");

                            b1.WithOwner()
                                .HasForeignKey("RouteId")
                                .HasConstraintName("fk_routes_routes_id");
                        });

                    b.OwnsOne("Locato.Data.Web.BaseLocation", "StartLocation", b1 =>
                        {
                            b1.Property<long>("RouteId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("start_location_address");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("start_location_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("start_location_longitude");

                            b1.Property<string>("PlaceId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("start_location_place_id");

                            b1.HasKey("RouteId");

                            b1.ToTable("routes");

                            b1.WithOwner()
                                .HasForeignKey("RouteId")
                                .HasConstraintName("fk_routes_routes_id");
                        });

                    b.Navigation("EndLocation")
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("StartLocation")
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.RouteGeoFenceCoordinate", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Routes.Route", "Route")
                        .WithMany("GeofenceCoordinates")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routegeofencecords_routes_route_id");

                    b.OwnsOne("Locato.Data.Web.Coordinate", "GeofencePoint", b1 =>
                        {
                            b1.Property<long>("RouteGeoFenceCoordinateId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("geofence_point_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("geofence_point_longitude");

                            b1.HasKey("RouteGeoFenceCoordinateId");

                            b1.ToTable("routegeofencecords");

                            b1.WithOwner()
                                .HasForeignKey("RouteGeoFenceCoordinateId")
                                .HasConstraintName("fk_routegeofencecords_routegeofencecords_id");
                        });

                    b.Navigation("GeofencePoint")
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.RouteStop", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Routes.Route", "Route")
                        .WithMany("Stops")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_route_stops_routes_route_id");

                    b.OwnsOne("Locato.Data.Web.Coordinate", "Coordinate", b1 =>
                        {
                            b1.Property<long>("RouteStopId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("coordinate_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("coordinate_longitude");

                            b1.HasKey("RouteStopId");

                            b1.ToTable("route_stops");

                            b1.WithOwner()
                                .HasForeignKey("RouteStopId")
                                .HasConstraintName("fk_route_stops_route_stops_id");
                        });

                    b.Navigation("Coordinate")
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.RouteStopGeoFence", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Routes.RouteStop", "Stop")
                        .WithOne("Geofence")
                        .HasForeignKey("Locato.Data.Entities.Transport.Routes.RouteStopGeoFence", "RouteStopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_route_stop_geo_fences_route_stops_route_stop_id");

                    b.Navigation("Stop");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.RouteTiming", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Routes.Route", "Route")
                        .WithMany("Timings")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_route_timings_routes_route_id");

                    b.HasOne("Locato.Data.Entities.Transport.VehicleEntities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_route_timings_vehicles_vehicle_id");

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Tracker.OrganizationTrackerDevice", b =>
                {
                    b.HasOne("Locato.Data.Entities.Business.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orgtrackerdevices_organizations_organization_id");

                    b.HasOne("Locato.Data.Entities.Transport.Tracker.TrackerDevice", "TrackerDevice")
                        .WithMany()
                        .HasForeignKey("TrackerDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orgtrackerdevices_tracker_devices_tracker_device_id");

                    b.Navigation("Organization");

                    b.Navigation("TrackerDevice");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Tracker.TrackerDevice", b =>
                {
                    b.HasOne("Locato.Data.Entities.Business.Organization", "Organization")
                        .WithMany("TrackerDevices")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tracker_devices_organizations_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Tracker.TrackerDeviceAlarm", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Tracker.TrackerDevice", "TrackerDevice")
                        .WithMany()
                        .HasForeignKey("TrackerDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tracker_device_alarms_tracker_devices_tracker_device_id");

                    b.OwnsOne("Locato.Data.Web.Coordinate", "Location", b1 =>
                        {
                            b1.Property<long>("TrackerDeviceAlarmId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("location_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("location_longitude");

                            b1.HasKey("TrackerDeviceAlarmId");

                            b1.ToTable("tracker_device_alarms");

                            b1.WithOwner()
                                .HasForeignKey("TrackerDeviceAlarmId")
                                .HasConstraintName("fk_tracker_device_alarms_tracker_device_alarms_id");
                        });

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("TrackerDevice");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Tracker.TrackerDeviceLocation", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Tracker.TrackerDevice", "TrackerDevice")
                        .WithMany("LocationsLog")
                        .HasForeignKey("TrackerDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trackerlocations_tracker_devices_tracker_device_id");

                    b.OwnsOne("Locato.Data.Web.Coordinate", "Location", b1 =>
                        {
                            b1.Property<long>("TrackerDeviceLocationId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("location_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("location_longitude");

                            b1.HasKey("TrackerDeviceLocationId");

                            b1.ToTable("trackerlocations");

                            b1.WithOwner()
                                .HasForeignKey("TrackerDeviceLocationId")
                                .HasConstraintName("fk_trackerlocations_trackerlocations_id");
                        });

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("TrackerDevice");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Trips.Trip", b =>
                {
                    b.HasOne("Locato.Data.Entities.UserEntities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_trips_users_driver_id");

                    b.HasOne("Locato.Data.Entities.Transport.Routes.Route", "Route")
                        .WithMany("Trips")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_trips_routes_route_id");

                    b.HasOne("Locato.Data.Entities.Transport.Tracker.TrackerDevice", "TrackerDevice")
                        .WithMany()
                        .HasForeignKey("TrackerDeviceId")
                        .HasConstraintName("fk_trips_tracker_devices_tracker_device_id");

                    b.OwnsOne("Locato.Data.Web.Coordinate", "EndLocation", b1 =>
                        {
                            b1.Property<long>("TripId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("end_location_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("end_location_longitude");

                            b1.HasKey("TripId");

                            b1.ToTable("trips");

                            b1.WithOwner()
                                .HasForeignKey("TripId")
                                .HasConstraintName("fk_trips_trips_id");
                        });

                    b.OwnsOne("Locato.Data.Web.Coordinate", "LastKnownLocation", b1 =>
                        {
                            b1.Property<long>("TripId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("last_known_location_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("last_known_location_longitude");

                            b1.HasKey("TripId");

                            b1.ToTable("trips");

                            b1.WithOwner()
                                .HasForeignKey("TripId")
                                .HasConstraintName("fk_trips_trips_id");
                        });

                    b.OwnsOne("Locato.Data.Web.Coordinate", "StartLocation", b1 =>
                        {
                            b1.Property<long>("TripId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("start_location_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("start_location_longitude");

                            b1.HasKey("TripId");

                            b1.ToTable("trips");

                            b1.WithOwner()
                                .HasForeignKey("TripId")
                                .HasConstraintName("fk_trips_trips_id");
                        });

                    b.Navigation("Driver");

                    b.Navigation("EndLocation")
                        .IsRequired();

                    b.Navigation("LastKnownLocation")
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("StartLocation")
                        .IsRequired();

                    b.Navigation("TrackerDevice");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Trips.TripActiveGeoFence", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Routes.RouteStopGeoFence", "StopGeofence")
                        .WithMany()
                        .HasForeignKey("StopGeofenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_active_geo_fences_route_stop_geo_fences_stop_geofence_");

                    b.HasOne("Locato.Data.Entities.Transport.Trips.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_active_geo_fences_trips_trip_id");

                    b.OwnsOne("Locato.Data.Web.Coordinate", "FirstCoordinate", b1 =>
                        {
                            b1.Property<long>("TripActiveGeoFenceId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("first_coordinate_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("first_coordinate_longitude");

                            b1.HasKey("TripActiveGeoFenceId");

                            b1.ToTable("trip_active_geo_fences");

                            b1.WithOwner()
                                .HasForeignKey("TripActiveGeoFenceId")
                                .HasConstraintName("fk_trip_active_geo_fences_trip_active_geo_fences_id");
                        });

                    b.OwnsOne("Locato.Data.Web.Coordinate", "LastKnownCoordinate", b1 =>
                        {
                            b1.Property<long>("TripActiveGeoFenceId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("last_known_coordinate_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("last_known_coordinate_longitude");

                            b1.HasKey("TripActiveGeoFenceId");

                            b1.ToTable("trip_active_geo_fences");

                            b1.WithOwner()
                                .HasForeignKey("TripActiveGeoFenceId")
                                .HasConstraintName("fk_trip_active_geo_fences_trip_active_geo_fences_id");
                        });

                    b.Navigation("FirstCoordinate")
                        .IsRequired();

                    b.Navigation("LastKnownCoordinate")
                        .IsRequired();

                    b.Navigation("StopGeofence");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Trips.TripLocation", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Trips.Trip", "Trip")
                        .WithMany("TripLocations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_locations_trips_trip_id");

                    b.OwnsOne("Locato.Data.Web.Coordinate", "Location", b1 =>
                        {
                            b1.Property<long>("TripLocationId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("location_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("location_longitude");

                            b1.HasKey("TripLocationId");

                            b1.ToTable("trip_locations");

                            b1.WithOwner()
                                .HasForeignKey("TripLocationId")
                                .HasConstraintName("fk_trip_locations_trip_locations_id");
                        });

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Trips.TripNotification", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Trips.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_notifications_trips_trip_id");

                    b.HasOne("Locato.Data.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_notifications_users_user_id");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Trips.TripSubscriber", b =>
                {
                    b.HasOne("Locato.Data.Entities.UserEntities.User", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_subscribers_users_subscriber_id");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntites.VehicleAlert", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Tracker.TrackerDeviceAlarm", "TrackerDeviceAlarm")
                        .WithMany()
                        .HasForeignKey("TrackerDeviceAlarmId")
                        .HasConstraintName("fk_vehicle_alerts_tracker_device_alarms_tracker_device_alarm_id");

                    b.HasOne("Locato.Data.Entities.Transport.Tracker.TrackerDevice", "TrackerDevice")
                        .WithMany()
                        .HasForeignKey("TrackerDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_alerts_tracker_devices_tracker_device_id");

                    b.HasOne("Locato.Data.Entities.Transport.Trips.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .HasConstraintName("fk_vehicle_alerts_trips_trip_id");

                    b.HasOne("Locato.Data.Entities.Transport.VehicleEntities.Vehicle", "Vehicle")
                        .WithMany("Alerts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_alerts_vehicles_vehicle_id");

                    b.OwnsOne("Locato.Data.Web.Coordinate", "Location", b1 =>
                        {
                            b1.Property<long>("VehicleAlertId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("location_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("location_longitude");

                            b1.HasKey("VehicleAlertId");

                            b1.ToTable("vehicle_alerts");

                            b1.WithOwner()
                                .HasForeignKey("VehicleAlertId")
                                .HasConstraintName("fk_vehicle_alerts_vehicle_alerts_id");
                        });

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("TrackerDevice");

                    b.Navigation("TrackerDeviceAlarm");

                    b.Navigation("Trip");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntites.VehicleDistanceTraveled", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Trips.Trip", "Trip")
                        .WithOne()
                        .HasForeignKey("Locato.Data.Entities.Transport.VehicleEntites.VehicleDistanceTraveled", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_distance_traveled_trips_trip_id");

                    b.HasOne("Locato.Data.Entities.Transport.VehicleEntities.Vehicle", "Vehicle")
                        .WithMany("DistanceTraveled")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_distance_traveled_vehicles_vehicle_id");

                    b.Navigation("Trip");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntites.VehicleTrackerDeviceLog", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.Tracker.TrackerDevice", "TrackerDevice")
                        .WithMany()
                        .HasForeignKey("TrackerDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicletdlogs_tracker_devices_tracker_device_id");

                    b.HasOne("Locato.Data.Entities.Transport.VehicleEntities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicletdlogs_vehicles_vehicle_id");

                    b.Navigation("TrackerDevice");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntities.Vehicle", b =>
                {
                    b.HasOne("Locato.Data.Entities.UserEntities.Driver", "BusDriver")
                        .WithMany()
                        .HasForeignKey("BusdriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_users_busdriver_id");

                    b.HasOne("Locato.Data.Entities.Business.Organization", "Organization")
                        .WithMany("Vehicles")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_organizations_organization_id");

                    b.Navigation("BusDriver");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntities.VehicleAlertUser", b =>
                {
                    b.HasOne("Locato.Data.Entities.Transport.VehicleEntites.VehicleAlert", "Alert")
                        .WithMany("Users")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_alert_users_vehicle_alerts_alert_id");

                    b.HasOne("Locato.Data.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_alert_users_users_user_id");

                    b.Navigation("Alert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntities.VehicleMedia", b =>
                {
                    b.HasOne("Locato.Data.Entities.Media.StaticMedia", "File")
                        .WithOne()
                        .HasForeignKey("Locato.Data.Entities.Transport.VehicleEntities.VehicleMedia", "FileId")
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_medias_static_medias_file_id");

                    b.HasOne("Locato.Data.Entities.Transport.VehicleEntities.Vehicle", "Vehicle")
                        .WithMany("Media")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_medias_vehicles_vehicle_id");

                    b.Navigation("File");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.Photo", b =>
                {
                    b.HasOne("Locato.Data.Entities.UserEntities.Profile", "Profile")
                        .WithOne("Photo")
                        .HasForeignKey("Locato.Data.Entities.UserEntities.Photo", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_photos_profiles_profile_id");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.User", b =>
                {
                    b.HasOne("Locato.Data.Entities.UserEntities.BaseUser", "BaseUser")
                        .WithMany("Users")
                        .HasForeignKey("BaseUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_base_users_base_user_id");

                    b.HasOne("Locato.Data.Entities.Business.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_organizations_organization_id");

                    b.HasOne("Locato.Data.Entities.UserEntities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_profiles_profile_id");

                    b.HasOne("Locato.Data.Entities.Transport.Routes.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_routes_route_id");

                    b.OwnsOne("Locato.Data.Web.Phone", "AlternatePhone", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int>("CountryCode")
                                .HasColumnType("integer")
                                .HasColumnName("alternate_phone_country_code");

                            b1.Property<long>("E164Format")
                                .HasColumnType("bigint")
                                .HasColumnName("alternate_phone_e164format");

                            b1.Property<long>("NationalNumber")
                                .HasColumnType("bigint")
                                .HasColumnName("alternate_phone_national_number");

                            b1.Property<string>("RawInput")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("alternate_phone_raw_input");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("Locato.Data.Web.Location", "Location", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_country");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("location_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("location_longitude");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_street");

                            b1.Property<string>("Zip")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_zip");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("Locato.Data.Web.Phone", "Phone", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int>("CountryCode")
                                .HasColumnType("integer")
                                .HasColumnName("phone_country_code");

                            b1.Property<long>("E164Format")
                                .HasColumnType("bigint")
                                .HasColumnName("phone_e164format");

                            b1.Property<long>("NationalNumber")
                                .HasColumnType("bigint")
                                .HasColumnName("phone_national_number");

                            b1.Property<string>("RawInput")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("phone_raw_input");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.Navigation("AlternatePhone")
                        .IsRequired();

                    b.Navigation("BaseUser");

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.UserDeviceInfo", b =>
                {
                    b.HasOne("Locato.Data.Entities.UserEntities.User", "User")
                        .WithMany("UserDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_device_infoes_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Locato.Data.Entities.Validation.LoginUser", b =>
                {
                    b.HasOne("Locato.Data.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_login_users_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Locato.Data.Entities.Validation.UserOTP", b =>
                {
                    b.HasOne("Locato.Data.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_ot_ps_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Locato.Data.Entities.Validation.UserTemporaryPassword", b =>
                {
                    b.HasOne("Locato.Data.Entities.UserEntities.BaseUser", "BaseUser")
                        .WithMany()
                        .HasForeignKey("BaseUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usertemppass_base_users_base_user_id");

                    b.HasOne("Locato.Data.Entities.UserEntities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usertemppass_users_created_by_id");

                    b.Navigation("BaseUser");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Locato.Data.Entities.Business.Organization", b =>
                {
                    b.Navigation("OrganiationEvents");

                    b.Navigation("Routes");

                    b.Navigation("TrackerDevices");

                    b.Navigation("Users");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.Route", b =>
                {
                    b.Navigation("GeofenceCoordinates");

                    b.Navigation("Stops");

                    b.Navigation("Timings");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Routes.RouteStop", b =>
                {
                    b.Navigation("Geofence")
                        .IsRequired();
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Tracker.TrackerDevice", b =>
                {
                    b.Navigation("LocationsLog");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.Trips.Trip", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("TripLocations");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntites.VehicleAlert", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Locato.Data.Entities.Transport.VehicleEntities.Vehicle", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("DistanceTraveled");

                    b.Navigation("Media");

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.BaseUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.Profile", b =>
                {
                    b.Navigation("Photo")
                        .IsRequired();
                });

            modelBuilder.Entity("Locato.Data.Entities.UserEntities.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Messages");

                    b.Navigation("SmsNotifications");

                    b.Navigation("UserDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
